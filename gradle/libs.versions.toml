[versions]

# JB
kotlin = "1.8.20"
coroutines = "1.7.0-RC"
compose = "1.4.0"
ktor = "2.3.0"
dateTime = "0.4.0"
serialization = "1.5.0"
markdown = "0.3.1"
#Android
agp = "7.4.2"
appCompat = "1.6.1"
ktx = "1.3.1"
activityCompose = "1.7.0"
preferences = "1.2.0"
#Libs
detekt = "1.23.0-RC3"
mviKotlin = "3.2.0"
decompose = "2.0.0-compose-experimental-alpha-02"
essenty = "1.1.0"
reaktive = "1.2.3"
sqlDelight = "1.5.5"
multiplatformSettings = "1.0.0"
imageLoader = "1.2.9"
libRes = "1.1.8"
#Desktop
logBack = "1.4.5"
log4jcore = "2.19.0"
log4jimpl = "2.19.0"


[plugins]

multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
cocoapods = { id = "org.jetbrains.kotlin.native.cocoapods", version.ref = "kotlin" }
compose = { id = "org.jetbrains.compose", version.ref = "compose" }
android-application = { id = "com.android.application", version.ref = "agp" }
libres = { id = "io.github.skeptick.libres", version.ref = "libRes" }
kotlinx-parcelize = { id = "org.jetbrains.kotlin.plugin.parcelize", version.ref = "kotlin" }
kotlinx-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
sqlDelight = { id = "com.squareup.sqldelight", version.ref = "sqlDelight" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }


[libraries]

jb-kotlin-coroutines-swing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "coroutines" }
jb-kotlin-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "dateTime" }
jb-kotlin-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization" }
jb-ktor-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
jb-ktor-serialization = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
jb-ktor-client-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
jb-ktor-client-android = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
jb-ktor-client-ios = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
jb-ktor-client-desktop = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
jb-markdown = { module = "org.jetbrains:markdown", version.ref = "markdown" }
android-appcompat = { module = "androidx.appcompat:appcompat", version.ref = "appCompat" }
android-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "activityCompose" }
android-ktx = { module = "androidx.core:core-ktx", version.ref = "ktx" }
android-preferences = { module = "androidx.preference:preference-ktx", version.ref = "preferences" }
ark-mvikotlin-rx = { module = "com.arkivanov.mvikotlin:rx", version.ref = "mviKotlin" }
ark-mvikotlin-core = { module = "com.arkivanov.mvikotlin:mvikotlin", version.ref = "mviKotlin" }
ark-mvikotlin-main = { module = "com.arkivanov.mvikotlin:mvikotlin-main", version.ref = "mviKotlin" }
ark-mvikotlin-extensions-reaktive = { module = "com.arkivanov.mvikotlin:mvikotlin-extensions-reaktive", version.ref = "mviKotlin" }
ark-decompose-core = { module = "com.arkivanov.decompose:decompose", version.ref = "decompose" }
ark-decompose-extensions = { module = "com.arkivanov.decompose:extensions-compose-jetbrains", version.ref = "decompose" }
ark-essenty = { module = "com.arkivanov.essenty:lifecycle", version.ref = "essenty" }
lib-reaktive-core = { module = "com.badoo.reaktive:reaktive", version.ref = "reaktive" }
lib-reaktive-interop = { module = "com.badoo.reaktive:coroutines-interop", version.ref = "reaktive" }
lib-reaktive-utils = { module = "com.badoo.reaktive:utils", version.ref = "reaktive" }
lib-sqldelight-driver-android = { module = "com.squareup.sqldelight:android-driver", version.ref = "sqlDelight" }
lib-sqldelight-driver-sqlite = { module = "com.squareup.sqldelight:sqlite-driver", version.ref = "sqlDelight" }
lib-sqldelight-driver-native = { module = "com.squareup.sqldelight:native-driver", version.ref = "sqlDelight" }
lib-settings-core = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatformSettings" }
lib-settings-test = { module = "com.russhwolf:multiplatform-settings-test", version.ref = "multiplatformSettings" }
lib-imageloader-core = { module = "io.github.qdsfdhvh:image-loader", version.ref = "imageLoader" }
lib-imageloader-blur = { module = "io.github.qdsfdhvh:image-loader-extension-blur", version.ref = "imageLoader" }
lib-imageloader-imageio = { module = "io.github.qdsfdhvh:image-loader-extension-imageio", version.ref = "imageLoader" }
lib-libres-compose = { module = "io.github.skeptick.libres:libres-compose", version.ref = "libRes" }
desktop-logback = { module = "ch.qos.logback:logback-classic", version.ref = "logBack" }
desktop-log4jcore = { module = "org.apache.logging.log4j:log4j-core", version.ref = "log4jcore" }
desktop-log4jimpl = { module = "org.apache.logging.log4j:log4j-slf4j-impl", version.ref = "log4jimpl" }
